name: Deployment Monitoring

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
  schedule:
    - cron: '*/5 * * * *' # Run every 5 minutes

jobs:
  monitor-staging:
    name: Monitor Staging Environment
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup monitoring tools
      run: |
        sudo apt-get update
        sudo apt-get install -y curl jq

    - name: Run staging health checks
      run: |
        ./scripts/deployment-monitor.sh staging health
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        NOTIFICATION_EMAIL: ${{ secrets.NOTIFICATION_EMAIL }}

    - name: Check application metrics
      run: |
        # Check response time
        response_time=$(curl -o /dev/null -s -w '%{time_total}' https://staging.stellarrec.com/health || echo "0")
        echo "Response time: ${response_time}s"
        
        # Fail if response time > 5 seconds
        if (( $(echo "$response_time > 5" | bc -l) )); then
          echo "Response time too high: ${response_time}s"
          exit 1
        fi

    - name: Check error rates
      run: |
        # This would typically query your monitoring system
        echo "Checking error rates..."
        # Example: Query New Relic, DataDog, or CloudWatch for error rates

    - name: Notify on failure
      if: failure()
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"üö® Staging monitoring failed - check deployment"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

  monitor-production:
    name: Monitor Production Environment
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup monitoring tools
      run: |
        sudo apt-get update
        sudo apt-get install -y curl jq bc

    - name: Run production health checks
      run: |
        ./scripts/deployment-monitor.sh production health
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        NOTIFICATION_EMAIL: ${{ secrets.NOTIFICATION_EMAIL }}

    - name: Check application metrics
      run: |
        # Check response time
        response_time=$(curl -o /dev/null -s -w '%{time_total}' https://stellarrec.com/health || echo "0")
        echo "Response time: ${response_time}s"
        
        # Fail if response time > 3 seconds for production
        if (( $(echo "$response_time > 3" | bc -l) )); then
          echo "Response time too high: ${response_time}s"
          exit 1
        fi

    - name: Check SSL certificate
      run: |
        # Check SSL certificate expiry
        expiry_date=$(echo | openssl s_client -servername stellarrec.com -connect stellarrec.com:443 2>/dev/null | openssl x509 -noout -dates | grep notAfter | cut -d= -f2)
        expiry_timestamp=$(date -d "$expiry_date" +%s)
        current_timestamp=$(date +%s)
        days_until_expiry=$(( (expiry_timestamp - current_timestamp) / 86400 ))
        
        echo "SSL certificate expires in $days_until_expiry days"
        
        # Warn if certificate expires in less than 30 days
        if [ $days_until_expiry -lt 30 ]; then
          echo "‚ö†Ô∏è SSL certificate expires soon: $days_until_expiry days"
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"‚ö†Ô∏è SSL certificate for stellarrec.com expires in $days_until_expiry days\"}" \
            ${{ secrets.SLACK_WEBHOOK_URL }}
        fi

    - name: Check database connectivity
      run: |
        # This would check database health
        echo "Checking database connectivity..."
        # Example: Run a simple query to verify database is accessible

    - name: Check external service dependencies
      run: |
        # Check OpenAI API
        echo "Checking OpenAI API..."
        if ! curl -f -s --max-time 10 "https://api.openai.com/v1/models" -H "Authorization: Bearer test" > /dev/null; then
          echo "‚ö†Ô∏è OpenAI API check failed"
        fi
        
        # Check SendGrid API
        echo "Checking SendGrid API..."
        if ! curl -f -s --max-time 10 "https://api.sendgrid.com/v3/user/profile" -H "Authorization: Bearer test" > /dev/null; then
          echo "‚ö†Ô∏è SendGrid API check failed"
        fi

    - name: Generate monitoring report
      run: |
        echo "# Production Monitoring Report" > monitoring-report.md
        echo "Generated on: $(date)" >> monitoring-report.md
        echo "" >> monitoring-report.md
        echo "## Health Checks" >> monitoring-report.md
        echo "- Application health: ‚úÖ" >> monitoring-report.md
        echo "- Response time: $(curl -o /dev/null -s -w '%{time_total}' https://stellarrec.com/health)s" >> monitoring-report.md
        echo "- SSL certificate: ‚úÖ" >> monitoring-report.md

    - name: Upload monitoring report
      uses: actions/upload-artifact@v3
      with:
        name: monitoring-report
        path: monitoring-report.md

    - name: Notify on failure
      if: failure()
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"üö® Production monitoring failed - immediate attention required"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        npm install -g lighthouse
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable

    - name: Run Lighthouse audit
      run: |
        lighthouse https://stellarrec.com --output json --output-path lighthouse-report.json --chrome-flags="--headless --no-sandbox"

    - name: Parse Lighthouse results
      run: |
        performance_score=$(jq '.categories.performance.score * 100' lighthouse-report.json)
        accessibility_score=$(jq '.categories.accessibility.score * 100' lighthouse-report.json)
        best_practices_score=$(jq '.categories["best-practices"].score * 100' lighthouse-report.json)
        seo_score=$(jq '.categories.seo.score * 100' lighthouse-report.json)
        
        echo "Performance: ${performance_score}%"
        echo "Accessibility: ${accessibility_score}%"
        echo "Best Practices: ${best_practices_score}%"
        echo "SEO: ${seo_score}%"
        
        # Fail if performance score is below 80
        if (( $(echo "$performance_score < 80" | bc -l) )); then
          echo "Performance score too low: ${performance_score}%"
          exit 1
        fi

    - name: Upload Lighthouse report
      uses: actions/upload-artifact@v3
      with:
        name: lighthouse-report
        path: lighthouse-report.json

  uptime-monitoring:
    name: Uptime Monitoring
    runs-on: ubuntu-latest

    steps:
    - name: Check application uptime
      run: |
        # Check main application
        if curl -f -s --max-time 30 "https://stellarrec.com" > /dev/null; then
          echo "‚úÖ Main application is up"
        else
          echo "‚ùå Main application is down"
          exit 1
        fi
        
        # Check API health endpoint
        if curl -f -s --max-time 30 "https://stellarrec.com/api/health" > /dev/null; then
          echo "‚úÖ API is up"
        else
          echo "‚ùå API is down"
          exit 1
        fi

    - name: Check staging uptime
      run: |
        if curl -f -s --max-time 30 "https://staging.stellarrec.com" > /dev/null; then
          echo "‚úÖ Staging is up"
        else
          echo "‚ö†Ô∏è Staging is down"
        fi

    - name: Record uptime metrics
      run: |
        # This would typically send metrics to your monitoring system
        echo "Recording uptime metrics..."
        # Example: Send to CloudWatch, DataDog, etc.